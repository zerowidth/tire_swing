module TireSwing

  # TireSwing nodes are auto-generated by node definitions (see TireSwing::NodeDefinition).
  # A node is meant to be a part of an AST external to the AST that Treetop generates at parse-time
  # with Treetop::Runtime::SyntaxNodes.
  #
  class Node

    # Create a subclass of Node with the given attributes, both simple and mapped.
    #
    # (see NodeDefinitions#node for more information)
    #
    def self.create(*attribs)
      Class.new(self) do
        attribs.each do |attrib|
          case attrib
          when Symbol, String
            attribute(attrib.to_s) { raise "no value given for #{attrib}" }
          when Hash
            attrib.each do |name, symbol|
              attribute(name.to_s) { raise "no value given for #{name}" }
              attribute_mapping[name.to_s] = symbol
            end
          end
        end
      end
    end

    # The mapping of attribute names to the auto-build values/methods/lambdas used by create_node
    def self.attribute_mapping
      @attribute_mapping ||= {}
    end

    # Instantiate a node.
    #
    # Values can either be a hash of values to set the values of this node's attributes, or a Treetop syntax node
    # which is used to automatically build this node.
    #
    def initialize(values={})
      if values.kind_of?(Treetop::Runtime::SyntaxNode)
        build_from_parsed_node(values)
      else
        values.each do |name, value|
          send("#{name}=", value)
        end
      end
    end

    protected

    # Auto-builds this node using the provided parsed node and the defined attributes and mapped attributes.
    def build_from_parsed_node(parsed_node)
      attributes.each do |attrib|
        if value = mapping(attrib)
          if value.kind_of?(Proc)
            value = value.call(parsed_node)
          else
            value = parsed_node.send(mapping(attrib))
          end
        else
          value = parsed_node.send(attrib)
        end
        value = value.map { |val| val.respond_to?(:build) ? val.build : val } if value.kind_of?(Array)
        value = value.build if value.respond_to?(:build)
        send("#{attrib}=", value)
      end
    end

    def attributes
      self.class.attributes
    end

    def mapping(name)
      self.class.attribute_mapping[name]
    end

  end

end
